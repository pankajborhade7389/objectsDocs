Ks*8 Object Model

The Kubernetes Platform contains control over the resources related to Storage and Compute.

List of five types of Object model:
i] Namespace
ii] POD
iii] Replica set
iv] Deployment
v] Service

Following are the key objects which exist in the Kubernetes:

**NameSpace:-
   -  Namespace is like a package name, Logical partionaning of the kubernities cluster is said to be Namespace.
   -  Namespaces are a way to organize clusters into virtual sub-clusters
   -  Any resource that exists within Kubernetes exists either in the default namespace or a namespace that is created by the cluster operator
   -  Namespaces provide a scope for names. Names of resources need to be unique within a namespace, but not across namespaces.
   -  Namespaces cannot be nested inside one another and each Kubernetes resource can only be in one namespace.
   -  To create namespace ,  my-namespace.yaml
   -  To Run namespace - kubectl create -f ./my-namespace.yaml
   -  To list the namespace in Cluster we should use below command 
         kubectl get namespaces
   -  To delete Namespace - kubectl delete namespaces <insert-some-namespace-name>
   -  Attaching the link for my reference - https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/

**PODS:-
   -  Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.
   -  A Pod is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers.
   -  A Pod is similar to a set of containers with shared namespaces and shared filesystem volumes
   -  To Create a POD , kubectl apply -f https://k8s.io/examples/pods/simple-pod.yaml
   -  Link for reference - https://kubernetes.io/docs/concepts/workloads/pods/

**Replica Set:-
   -  A ReplicaSet's purpose is to maintain a stable set of replica Pods running at any given time.
   -  Commands which are listed to operate on Replica set
   -  https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/

**Deployment:-
   -  A Deployment provides declarative updates for Pods and ReplicaSets.
   -  We can create a deployment by using following command , kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml
   -  To check if the deployed or not , use the below command kubectl get deployments
   -  To get deployment roll out status- kubectl rollout status deployment/nginx-deployment
   -  Attaching the link which includes all the command and also the commands if we get any error,
   -  https://kubernetes.io/docs/concepts/workloads/controllers/deployment/

**Service:- 
   - Service An abstract way to expose an application running on a set of Pods as a network service. With Kubernetes you don't need to modify your application to use      - an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.
